TODO:

 aisl_parser
 Write utility app to:
 - read in AIML and save to a caiml file
 - read in AIML and save to a aisl file
 - read in caiml and save to a AIML file
 - read in aisl and save to a AIML file 
   * Note: requires utility to handle out-of-AIML-spec-options
 Write utility to handle out-of-AIML-spec options of aisl
 - handled through system tag.
 Write reference app for Linux and Android to handle run.X
 Write small php class to handle input output through a RESTful API

---------------------------------------------------------------------


Issues/Things to Consider
=========================
- if getAnswer() is false inside respond() the input vector will be filled
with unanswered inputs

- check "dialog history" behavior, something is not right... either with
libaiml or with Dialog.aiml

Optimizations
=============
- look for expensive operations on vectors/nodes/lists

Still pending (probably for next version)
=========================================
** move trim_blanks to runtime before the response is delivered to user. This
allows to removed newlines introduced by <javascript> and other tags
|_ just remove the newlines and stuff generated at runtime

XML:
  - add namespace processing support to aiml_parser
    |_ there are incorrect .aiml's that use <li> inside <ul>, which confuses
    the interpreter (because <li> is parsed as aiml: when it should be noted
    that such li's are html:). Fix that.
    
  - check for XML specs about casing of tags/parameters. should they be case insensitive?
  - check for xml:space handling in libxml
  - add validation support

General:
  - allow # of that/input's saved to be settable at runtime (array -> vector)
  - Add options to the .conf file to let the user decide how to handle unclear
  or undefined situations of the AIML spec

Side Programs
=============
AIML compiler: will allow compiling .aiml code into .caiml which can be loaded a
  lot faster. Compiled AIML code would be an optional input to the interpreter, native
  AIML parser won't be removed from libaiml.

IDEAS:
=====
  * Automatic learning could be using the system (and maybe javascript) tag: the bot could
    write AIML data to a file and then learn it using <learn></learn>.
    Of course, one could use a normal targeting approach by gossiping to a file (plain-text)
    information about an input being match by the catch-all category (all * wildcards). And then
    the botmaster would approve or deny this and use the learn feature with a user provided
    AIML file.

