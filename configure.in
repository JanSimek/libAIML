AC_INIT(configure.in)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(libaiml, 0.9.0)

AC_LANG_CPLUSPLUS
AC_PROG_CXX
AC_PROG_RANLIB
AM_PROG_LIBTOOL

AC_ARG_WITH(v8_path,AS_HELP_STRING([--with-v8-path=/path/to/v8/],[root of v8 source]))

## COMPILE OPTIONS ##
AC_ARG_ENABLE(caiml,
  AC_HELP_STRING([--enable-caiml],[Enable CAIML writer/reader (see README)]),
  AC_DEFINE([ENABLE_CAIML], [1], [Enable compilation of CAIML writer/reader]))
AC_ARG_ENABLE(javascript,
  AC_HELP_STRING([--enable-javascript],[Enable JavaScript API integration (see README)]),
  AC_DEFINE([ENABLE_JAVASCRIPT], [1], [Enable JavaScript API integration]))
AC_ARG_ENABLE(pcrecpp,
  AC_HELP_STRING([--enable-pcrecpp],[Enable PCRE (c++ binding) support]),
  AC_DEFINE([ENABLE_PCRECPP], [1], [Enable PCRE support]))
AC_ARG_ENABLE(werror,
  AC_HELP_STRING([--disable-werror],[Disable -Werror flag (warnings as errors)]),
  WERROR_CXXFLAG='', WERROR_CXXFLAG='-Werror')

## Checks for header files. ##
AC_CHECK_HEADERS([netinet/in.h])

V8_INCLUDE=""
if test "$with_v8_path" == "yes" || test "$with_v8_path" == ""
then
  AC_MSG_ERROR(["Please specify the source path, using --with-v8-path=YOUR_PATH"], ,[Error, no path defined])
else
  AC_SUBST(V8_PATH,$with_v8_path)
  V8_INCLUDE=$with_v8_path/include/
fi
AC_SUBST(V8_INCLUDE,$V8_INCLUDE)

if test "$enable_javascript" == "yes"; then
  AC_CHECK_HEADERS([$V8_INCLUDE/v8.h], , [AC_MSG_ERROR([Couldn't find v8.h ... try downloading the source from
  https://developers.google.com/v8/build
  or set the path with --with-v8-path=/path/to/v8 ] )])
fi

## Library Checks ##
V8_LIB_PATH=""
V8_LIB_PATH2=""
if test `uname -m` == "x86_64"; then
  V8_LIB_PATH="$with_v8_path/out/x64.release/obj.target/tools/gyp/"
  V8_LIB_PATH2="$with_v8_path/out/x64.release/obj.target/third_party/icu/"
else
  V8_LIB_PATH="$with_v8_path/out/ia32.release/obj.target/tools/gyp/"
  V8_LIB_PATH2="$with_v8_path/out/ia32.release/obj.target/third_party/icu/"
fi;
# AC_SUBST(V8_LIB_PATH,$V8_LIB_PATH)

V8_LIBS=""
if test "$enable_javascript" == "yes"
then
  V8_LIBS="  -lpthread -lrt -L$V8_LIB_PATH  -lv8_base -lv8_snapshot "
  V8_LIBS+=" -L$V8_LIB_PATH2 -licuuc -licui18n -licudata "

  if test ! -f "$V8_LIB_PATH/libv8_base.a"; then
    AC_MSG_ERROR([library does NOT exist : "$V8_LIB_PATH/libv8_base.a" ])
  fi
  if test ! -f "$V8_LIB_PATH/libv8_snapshot.a"; then
    AC_MSG_ERROR([library does NOT exist : "$V8_LIB_PATH/libv8_snapshot.a" ])
  fi
  if test -f "$V8_LIB_PATH/libv8_libbase.x64.a"; then
    V8_LIBS+=" -lv8_libbase.x64 "
  else
    if test -f "$V8_LIB_PATH/libv8_libbase.a"; then
      V8_LIBS+=" -lv8_libbase "
    else
      AC_MSG_ERROR([library does NOT exist : "$V8_LIB_PATH/libv8_libbase.???.a" ])
    fi
  fi

  LDFLAGS="$LDFLAGS $V8_LIBS"
  AC_SUBST(LDFLAGS,$LDFLAGS)
  AC_SUBST(V8_LIBS,$V8_LIBS)
fi

if test "$enable_pcrecpp" == "yes"; then
  AC_CHECK_HEADERS([pcrecpp.h])
  PCRECPP_LIBS=-lpcrecpp
else
  PCRECPP_LIBS=
fi
AC_SUBST([PCRECPP_LIBS])

## Flags
AC_SUBST([WERROR_CXXFLAG])

## Check for programs ##
AC_CHECK_PROG([has_xml2_config], [xml2-config], [yes], [no])
if test "$hast_xml2_config" == "no"; then
  AC_MSG_ERROR([libxml2 is needed to compile libaiml])
fi
XML2_LIBS=`xml2-config --libs`
AC_SUBST(XML2_LIBS)

## Checks for typedefs, structures, and compiler characteristics. ##
AC_CHECK_FUNCS([floor])
AC_FUNC_STRFTIME
AC_TYPE_SIZE_T

echo "Results:"
echo -ne "CAIML Support:\t\t"
if test "$enable_caiml" == "yes"; then echo "YES"; else echo "NO"; fi

echo -ne "PCREC++ Support:\t"
if test "$enable_pcrecpp" == "yes"; then echo "YES"; else echo "NO"; fi

echo -ne "JavaScript Support:\t"
if test "$enable_javascript" == "yes"; then
  echo "YES";
  if test "$with_v8_path" != ""; then
    echo "path to v8=$with_v8_path";
  fi
else
  echo "NO";
fi

AC_OUTPUT(Makefile src/Makefile test_app/aiml/Makefile test_app/Makefile libaiml.pc)
